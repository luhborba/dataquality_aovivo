{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Bem vindo a documenta\u00e7\u00e3o do Projeto de DataQuality aovivo.</p>"},{"location":"#layout-da-documentacao","title":"Layout da Documenta\u00e7\u00e3o","text":"<ul> <li>FrontEnd</li> <li>BackEnd</li> <li>Tests</li> </ul>"},{"location":"p2-frontend/","title":"FrontEnd","text":"<p>P\u00e1gina de documenta\u00e7\u00e3o do FrontEnd.</p> <p>Nesta p\u00e1gina estamos documentando como foi realizado o FrontEnd da nossa p\u00e1gina.</p> <p>Fun\u00e7\u00e3o principal que chama a interface visual para valida\u00e7\u00e3o do arquivo csv de acordo com o contrato de dados.</p> Source code in <code>app.py</code> <pre><code>def main():\n    \"\"\"Fun\u00e7\u00e3o principal que chama a interface visual para valida\u00e7\u00e3o do arquivo csv de acordo com o contrato de dados.\"\"\"\n    st.set_page_config(\n        page_title=\"Valida\u00e7\u00e3o de CSV\", page_icon=\":bar_chart:\", layout=\"wide\"\n    )\n\n    st.title(\"Valida\u00e7\u00e3o de CSV - Data Quality\")\n\n    csv = st.file_uploader(\"Selecione o arquivo CSV\", type=[\"csv\"])\n\n    botao = st.button(\"Validar\")\n\n    if botao:\n        validar(csv)\n</code></pre>"},{"location":"p3-backend/","title":"BackEnd","text":"<p>P\u00e1gina de documenta\u00e7\u00e3o sobre as fun\u00e7\u00e3o de BackEnd</p>"},{"location":"p3-backend/#contrato-de-dados","title":"Contrato de Dados","text":"<p>             Bases: <code>BaseModel</code></p> <p>Classe de Contrato de Dados.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>PositiveInt</code> <p>Identificador do registro</p> required <code>nome</code> <code>str</code> <p>Nome do funcion\u00e1rio</p> required <code>idade</code> <code>PositiveInt</code> <p>Idade do funcion\u00e1rio</p> required <code>datanascimento</code> <code>datetime</code> <p>Data de nascimento do funcion\u00e1rio</p> required <code>email</code> <code>EmailStr</code> <p>Email do funcion\u00e1rio</p> required <code>cargo</code> <code>str</code> <p>Cargo do funcion\u00e1rio</p> required <code>departamento</code> <code>str</code> <p>Departamento do funcion\u00e1rio</p> required Source code in <code>schema.py</code> <pre><code>class ContratoFuncionarios(BaseModel):\n    \"\"\"Classe de Contrato de Dados.\n\n    Args:\n        id (PositiveInt): Identificador do registro\n        nome (str): Nome do funcion\u00e1rio\n        idade (PositiveInt): Idade do funcion\u00e1rio\n        datanascimento (datetime): Data de nascimento do funcion\u00e1rio\n        email (EmailStr): Email do funcion\u00e1rio\n        cargo (str): Cargo do funcion\u00e1rio\n        departamento (str): Departamento do funcion\u00e1rio\n    \"\"\"\n\n    id: PositiveInt\n    nome: str\n    idade: PositiveInt\n    datanascimento: datetime\n    email: EmailStr\n    cargo: str\n    departamento: str\n</code></pre>"},{"location":"p3-backend/#validacao","title":"Valida\u00e7\u00e3o","text":"<p>Fun\u00e7\u00e3o respons\u00e1vel pela valida\u00e7\u00e3o do arquivo em formato csv de acordo com o contrado de dados.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <p>Arquivo csv.</p> required Source code in <code>app.py</code> <pre><code>def validar(file):\n    \"\"\"\n    Fun\u00e7\u00e3o respons\u00e1vel pela valida\u00e7\u00e3o do arquivo em formato csv de acordo com o contrado de dados.\n\n    Args:\n        file: Arquivo csv.\n    \"\"\"\n    try:\n        df = pd.read_csv(file)\n        erros = []\n\n        for idx, row in df.iterrows():\n            try:\n                ContratoFuncionarios(**row.to_dict())\n            except Exception as e:\n                erros.append(f\"Linha {idx+2}: {e}\")\n\n        if erros:\n            st.error(\"Erros encontrados no seu arquivo CSV:\")\n            for erro in erros:\n                st.error(erro)\n        else:\n            st.success(\"Arquivo Validado com Sucesso!!!\")\n    except Exception as e:\n        st.error(f\"Erro ao ler o arquivo CSV: {e}\")\n</code></pre>"},{"location":"p3-test/","title":"Tests","text":"<p>P\u00e1gina de Documenta\u00e7\u00e3o de Testes.</p>"},{"location":"p3-test/#teste-de-aplicacao","title":"Teste de Aplica\u00e7\u00e3o","text":"<p>Arquivo de testes da interface visual.</p>"},{"location":"p3-test/#test.test_app.driver","title":"<code>driver()</code>","text":"<p>Inicia o navegador.</p> Source code in <code>test\\test_app.py</code> <pre><code>@pytest.fixture\ndef driver():\n    \"\"\"Inicia o navegador.\"\"\"\n    process = subprocess.Popen([\"streamlit\", \"run\", \"app.py\"])\n\n    driver = webdriver.Firefox()\n    driver.get(\"http://localhost:8501\")\n    driver.set_page_load_timeout(10)\n\n    yield driver\n\n    driver.quit()\n    process.kill()\n</code></pre>"},{"location":"p3-test/#test.test_app.test_app_open","title":"<code>test_app_open(driver)</code>","text":"<p>Testa se a interface visual est\u00e1 aberta.</p> Source code in <code>test\\test_app.py</code> <pre><code>def test_app_open(driver):\n    \"\"\"Testa se a interface visual est\u00e1 aberta.\"\"\"\n    driver.get(\"http://localhost:8501\")\n    sleep(3)\n</code></pre>"},{"location":"p3-test/#test.test_app.test_app_title","title":"<code>test_app_title(driver)</code>","text":"<p>Testa se o ti\u00edtulo da interface visual est\u00e1 correto.</p> Source code in <code>test\\test_app.py</code> <pre><code>def test_app_title(driver):\n    \"\"\"Testa se o ti\u00edtulo da interface visual est\u00e1 correto.\"\"\"\n    driver.get(\"http://localhost:8501\")\n    sleep(3)\n    assert driver.title == \"Valida\u00e7\u00e3o de CSV\"\n</code></pre>"},{"location":"p3-test/#teste-contrato-de-dados","title":"Teste Contrato de Dados","text":"<p>Arquivo de testes do schema.</p>"},{"location":"p3-test/#test.test_schema.test_dados_invalidos","title":"<code>test_dados_invalidos()</code>","text":"<p>Testa se o schema de dados \u00e9 invalido.</p> Source code in <code>test\\test_schema.py</code> <pre><code>def test_dados_invalidos():\n    \"\"\"Testa se o schema de dados \u00e9 invalido.\"\"\"\n    dados_invalidos = {\n        \"id\": -1,\n        \"nome\": \"Luciano Borba\",\n        \"idade\": 23,\n        \"datanascimento\": datetime.now(),\n        \"email\": \"luhborbafilho\",\n        \"cargo\": \"Desenvolvedor Python\",\n        \"departamento\": \"TI\",\n    }\n    with pytest.raises(ValidationError):\n        ContratoFuncionarios(**dados_invalidos)\n</code></pre>"},{"location":"p3-test/#test.test_schema.test_validar_contrato","title":"<code>test_validar_contrato()</code>","text":"<p>Testa se o schema de dados \u00e9 valido.</p> Source code in <code>test\\test_schema.py</code> <pre><code>def test_validar_contrato():\n    \"\"\"Testa se o schema de dados \u00e9 valido.\"\"\"\n    dados_validos = {\n        \"id\": 1,\n        \"nome\": \"Luciano Borba\",\n        \"idade\": 23,\n        \"datanascimento\": datetime.now(),\n        \"email\": \"luhborbafilho@gmail.com\",\n        \"cargo\": \"Desenvolvedor Python\",\n        \"departamento\": \"TI\",\n    }\n    funcionarios = ContratoFuncionarios(**dados_validos)\n    assert funcionarios.id == dados_validos[\"id\"]\n    assert funcionarios.nome == dados_validos[\"nome\"]\n    assert funcionarios.idade == dados_validos[\"idade\"]\n    assert funcionarios.datanascimento == dados_validos[\"datanascimento\"]\n    assert funcionarios.email == dados_validos[\"email\"]\n    assert funcionarios.cargo == dados_validos[\"cargo\"]\n    assert funcionarios.departamento == dados_validos[\"departamento\"]\n</code></pre>"}]}